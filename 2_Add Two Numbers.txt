/******************************************
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
******************************************/
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) 
    {
        int c = 0;
        ListNode *head=l1;
        ListNode *tail=l1;
        while(l1&&l2)
        {
            c += l1->val + l2->val;
            l1->val=c%10;
            tail=l1;
            l1 = l1->next;
            l2 = l2->next;
            c /= 10;
        }
        if(l1==NULL){
            tail->next=l2;
            l1=l2;
        }
        if(c==0){
            return head;
        }
        while(c&&l1)
        {
            c+=l1->val;
            l1->val=c%10;
            tail=l1;
            l1=l1->next;
            c/=10;
        }
        if(c)
        {
            ListNode *temp=new ListNode(c);
            tail->next=temp;
        }
        return head;
    }
};